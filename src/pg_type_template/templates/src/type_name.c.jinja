#include "postgres.h"
#include "fmgr.h"

#include "access/hash.h"
#include "catalog/pg_type.h"
#include "lib/stringinfo.h"
#include "libpq/pqformat.h"
#include "utils/array.h"
#include "utils/builtins.h"

{% if add_module_magic is defined and add_module_magic %}
PG_MODULE_MAGIC;
{% endif %}

typedef uint8 pg_type;

/*
 * Type values as uint8, this definition should correspond to PG_TYPE_NAMES
 * array entries.
 */
{% for item in type_values|sort_by_name %}
#define PG_{{ item.name|uint8_name }} {{ item.value }}
{% endfor %}

/*
 * Type values as string, this definition should correspond to their
 * indexes above.
 */
#define PG_TYPE_NAMES { \
{% for item in type_values|sort_by_name %}
	{ PG_{{ item.name|uint8_name }}, "{{ item.name }}" }{{ ", " if not loop.last else "" }} \
{% endfor %}
	}

typedef struct PgTypeStruct
{
	pg_type num;
	const char *name;
} PgTypeStruct;

/*
 * Sorted array of values which is used to get uint8 representation using
 * bsearch.
 */
static const PgTypeStruct pg_type_list_sorted[] = PG_TYPE_NAMES;

#define PG_TYPE_NUM	sizeof(pg_type_list_sorted) / sizeof(PgTypeStruct)

/*
 * Array of values which is used to get type name by its number.
 */
static PgTypeStruct pg_type_list[PG_UINT8_MAX + 1];
static bool pg_type_list_initialized = false;

#define PG_RETURN_UINT8(x) return UInt8GetDatum(x)
#define PG_GETARG_UINT8(x) DatumGetUInt8(PG_GETARG_DATUM(x))

PG_FUNCTION_INFO_V1({{ type_name }}_in);
PG_FUNCTION_INFO_V1({{ type_name }}_out);
PG_FUNCTION_INFO_V1({{ type_name }}_recv);
PG_FUNCTION_INFO_V1({{ type_name }}_send);

PG_FUNCTION_INFO_V1({{ type_name }}_get_list);

static int
pg_type_item_cmp(const void *p1, const void *p2)
{
	const PgTypeStruct *a1 = (const PgTypeStruct *) p1;
	const PgTypeStruct *a2 = (const PgTypeStruct *) p2;

	/* Case-independent comparison */
	return pg_strcasecmp(a1->name, a2->name);
}

static inline pg_type
pg_type_from_str(const char *str)
{
	PgTypeStruct *found;
	PgTypeStruct key;

	key.name = str;
	found = (PgTypeStruct *) bsearch(&key, pg_type_list_sorted,
									 PG_TYPE_NUM,
									 sizeof(PgTypeStruct),
									 pg_type_item_cmp);
	if (found == NULL)
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg("unknown input value: %s", str)));

	return found->num;
}

/*
 * Initialize large array of values by available sorted list of type values.
 */
static void
pg_type_list_initialize(void)
{
	MemSet(pg_type_list, 0, sizeof(pg_type_list));

	for (int i = 0; i < PG_TYPE_NUM; i++)
	{
		const PgTypeStruct *item = &pg_type_list_sorted[i];

		pg_type_list[item->num] = *item;
	}
}

static inline char *
pg_type_to_str(pg_type c)
{
	PgTypeStruct *res;

	if (!pg_type_list_initialized)
	{
		pg_type_list_initialize();
		pg_type_list_initialized = true;
	}

	res = &pg_type_list[c];
	if (res->name == NULL)
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg("unexpected type value: %d", c)));

	return pstrdup(res->name);
}

/*
 * SQL-callable functions.
 */

Datum
{{ type_name }}_in(PG_FUNCTION_ARGS)
{
	char	   *str = PG_GETARG_CSTRING(0);

	for (int i = 0; str[i]; i++){
		str[i] = tolower(str[i]);
	}

	PG_RETURN_UINT8(pg_type_from_str(str));
}

Datum
{{ type_name }}_out(PG_FUNCTION_ARGS)
{
	pg_type		s = PG_GETARG_UINT8(0);

	PG_RETURN_CSTRING(pg_type_to_str(s));
}

Datum
{{ type_name }}_recv(PG_FUNCTION_ARGS)
{
	StringInfo	buf = (StringInfo) PG_GETARG_POINTER(0);

	PG_RETURN_UINT8(pq_getmsgbyte(buf));
}

Datum
{{ type_name }}_send(PG_FUNCTION_ARGS)
{
	pg_type		s = PG_GETARG_UINT8(0);
	StringInfoData buf;

	pq_begintypsend(&buf);
	pq_sendbyte(&buf, s);

	PG_RETURN_BYTEA_P(pq_endtypsend(&buf));
}

Datum
{{ type_name }}_get_list(PG_FUNCTION_ARGS)
{
	ArrayBuildState *astate = NULL;

	if (!pg_type_list_initialized)
	{
		pg_type_list_initialize();
		pg_type_list_initialized = true;
	}

	for (int i = 0; i < PG_UINT8_MAX + 1; i++)
	{
		if (pg_type_list[i].name == NULL)
			continue;

		astate = accumArrayResult(astate,
								  CStringGetTextDatum(pg_type_list[i].name),
								  false, TEXTOID, CurrentMemoryContext);
	}

	Assert(astate != NULL);
	PG_RETURN_DATUM(makeArrayResult(astate, CurrentMemoryContext));
}
